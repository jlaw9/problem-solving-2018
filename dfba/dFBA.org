* Legacy                                                           :noexport:
** Defining Dynamic FBA model for a single species
*** Import headers
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 %matplotlib inline
 import cobra
 import PyDSTool as dst
 import pandas as pd
 import matplotlib.pyplot as plt
 import copy
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[1]:
 :END:
*** File Paths for Media spec and FBA model
 #+BEGIN_SRC ipython :session :exports both :results raw drawer 
 model = cobra.io.read_sbml_model('./data/Bacteroides_sp_1_1_14.xml')
 mediaFluxes = pd.read_csv('./data/VMH_HighFiber.tsv', sep='\t')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[3]:
 :END:
*** Extract exchange reactions into variable definition and ics dictionary
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
   def cleanupname(name):
       """
       The reaction names in the model files 
       don't have brackets or parentheses. I replaced
       those found in the mediaFluxes file.
       """
       name = name.replace('[', '_LPAREN_')
       name = name.replace(']', '_RPAREN_')
       name = name.replace('(', '_LPAREN_')
       name = name.replace(')', '_RPAREN_')
       return name

   """
   Initialize dictionaries for defining the ODE variables for a 
   single species
   """
   VarDef = dict()
   ParDef_base = dict()
   ICS_base = dict()

   solution = model.optimize() # Get fluxes
   all_exchanges = model.exchanges
   media_derived_components = dict()

   exchange_reaction_ids = [rxn.id for rxn in all_exchanges]
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[4]:
 :END:

**** Extract the reaction names and flux values into a dictionary.
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 for i, row in mediaFluxes.iterrows():
     N = cleanupname(row.Reaction)
     if N in exchange_reaction_ids:
         media_derived_components[N] = row['Flux Value'] / (24.0*60.0) # Per minute

 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[51]:
 :END:

**** Get the outfluxes
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 out_fluxes = []
 for k in all_exchanges:
     if k.reversibility and k.id not in media_derived_components.keys():
         out_fluxes.append(k.id)

 ParDef_base['mu'] = solution.objective_value/60.0
 VarDef['X'] =  'mu * X'
 ICS_base['X'] = 1e-1
 for r in all_exchanges:
     if r.id in media_derived_components.keys():
         ParDef_base[r.id + '_influx'] = media_derived_components[r.id]
         ParDef_base[r.id + '_consumption'] = solution.fluxes[r.id]
         ICS_base[r.id] = media_derived_components[r.id]
         VarDef[r.id] = r.id + '_influx + ' + r.id + '_consumption' + ' * X'
     if r.id in out_fluxes:
         ParDef_base[r.id + '_outflux'] = solution.fluxes[r.id] 
         VarDef[r.id] = r.id + '_outflux * X'
         ICS_base[r.id] = 0.0
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[52]:
 :END:

*** Define PyDSTool Model
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
   TSPAN = 5

   ParDef = copy.deepcopy(ParDef_base)
   ICS = copy.deepcopy(ICS_base)
   def simulateModel(ModelDS, ParDef, ICS, TSPAN, tstart):
       ModelDS.set(ics=ICS ,pars=ParDef,tdata=[tstart, tstart + TSPAN])
       P = ModelDS.compute('test').sample(dt=0.1)
       return(P)
   ParDef = copy.deepcopy(ParDef_base)
   ICS = copy.deepcopy(ICS_base)
   ModelDef =dst.args(name='Bacteroides',
                     varspecs=VarDef,
                     pars=ParDef,
                     ics=ICS,
                     )

   ModelDS = dst.Vode_ODEsystem(ModelDef)

   P = simulateModel(ModelDS, ParDef, ICS,TSPAN, 0.0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[53]:
 :END:

*** Create Upperlimit
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
   AllPoints = []
   AllPoints.append(P)
   OriginalLB = {}
   model_copy = copy.deepcopy(model)
   T0=TSPAN

   for r in model_copy.reactions:
       if r in model_copy.exchanges:
           OriginalLB[r.id] = r.lower_bound

   for i in range(0, 10):
       print(T0)
       solution = model_copy.optimize()
       all_exchanges = model_copy.exchanges
       for r in all_exchanges:
           if r.id in media_derived_components.keys():
               model_copy.reactions.get_by_id(r.id).lower_bound = OriginalLB[r.id]*P[r.id][-1]/(0.0005+P[r.id][-1])
               if r.id == 'EX_glu_L_LPAREN_e_RPAREN_':
                   print(r.id + ': ' +str(OriginalLB[r.id]) + ' -> ' + str(model_copy.reactions.get_by_id(r.id).lower_bound))
       solution = model_copy.optimize()
    #   print('mu= ' +str(solution.objective_value))
       ParDef['mu'] = solution.objective_value/60.0
       ICS['X'] = P['X'][-1]
       for r in all_exchanges:
           if r.id in media_derived_components.keys():
                  if P[r.id][-1] < 0.0:
                      ICS[r.id] = 0.0
                  else:
    
                      ParDef[r.id + '_influx'] = media_derived_components[r.id]
                      ParDef[r.id + '_consumption'] = solution.fluxes[r.id]
                      ICS[r.id] = P[r.id][-1]
           if r.id in out_fluxes:
               ParDef[r.id + '_outflux'] = solution.fluxes[r.id] 
               ICS[r.id] = P[r.id][-1] # 0.0
       del P
       P = simulateModel(ModelDS, ParDef, ICS,TSPAN, T0)
   #    print('EX_glu_L_LPAREN_e_RPAREN_' + str(P['EX_glu_L_LPAREN_e_RPAREN_'][-1]))
       T0 += TSPAN

       AllPoints.append(P)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[54]:
 :END:



*** Results
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :ipyfile ./obipy-resources/metabolite-traj-1e-3.png
    T=[]
    X=[]
   for v in VarDef.keys():
           for P in AllPoints:
                   if 'h2o' not in v :
                           T = P['t']
                           X = P[v]
                           plt.plot(T,X)
                   # T = P['t']
                   # X = P['X']
                   # plt.plot(T,X)

   plt.xlabel('Time (minutes)')
   plt.ylabel('mmol')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[55]:
 : Text(0,0.5,u'mmol')
 [[file:./obipy-resources/metabolite-traj-1e-3.png]]
 :END:

 #+BEGIN_SRC ipython :session :exports both :results raw drawer :ipyfile ./obipy-resources/biomass-1e-1.png
    T=[]
    X=[]
   for v in VarDef.keys():
           for P in AllPoints:

                   T = P['t']
                   X = P['X']
                   plt.plot(T,X)

   plt.xlabel('Time (minutes)')
   plt.ylabel('gdw')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[56]:
 : Text(0,0.5,u'gdw')
 [[file:./obipy-resources/biomass-1e-1.png]]
 :END:

 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
 len(VarDef.keys())
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[10]:
 : 59
 :END:
** Defining Dynamic FBA model for multiple species
 <2018-04-12 Thu>
*** Import headers
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 %matplotlib inline
 import cobra
 import PyDSTool as dst
 import pandas as pd
 import matplotlib.pyplot as plt
 import copy
 import sys
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[40]:
 :END:
*** File Paths for Media spec and FBA model
 #+BEGIN_SRC ipython :session :exports both :results raw drawer 
 PATH = '/home/cerevisaj/Documents/VT/Problem-Solving/problem-solving-2018/dfba'
 model = cobra.io.read_sbml_model(PATH + '/data/Bacteroides_sp_1_1_14.xml')
 mediaFluxes = pd.read_csv(PATH + '/data/VMH_HighFiber.tsv', sep='\t')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[44]:
 :END:
*** Extract exchange reactions into variable definition and ics dictionary
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
   def cleanupname(name):
       """
       The reaction names in the model files 
       don't have brackets or parentheses. I replaced
       those found in the mediaFluxes file.
       """
       name = name.replace('[', '_LPAREN_')
       name = name.replace(']', '_RPAREN_')
       name = name.replace('(', '_LPAREN_')
       name = name.replace(')', '_RPAREN_')
       return name

   """
   Initialize dictionaries for defining the ODE variables for a 
   single species
   """
   VarDef = dict()
   ParDef_base = dict()
   ICS_base = dict()

   solution = model.optimize() # Get fluxes
   all_exchanges = model.exchanges
   media_derived_components = dict()

   exchange_reaction_ids = [rxn.id for rxn in all_exchanges]
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[50]:
 :END:

**** Extract the reaction names and flux values into a dictionary.
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 for i, row in mediaFluxes.iterrows():
     N = cleanupname(row.Reaction)
     if N in exchange_reaction_ids:
         media_derived_components[N] = row['Flux Value'] / (24.0*60.0) # Per minute

 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[51]:
 :END:

**** Get the outfluxes
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
 out_fluxes = []
 for k in all_exchanges:
     if k.reversibility and k.id not in media_derived_components.keys():
         out_fluxes.append(k.id)

 ParDef_base['mu'] = solution.objective_value/60.0
 VarDef['X'] =  'mu * X'
 ICS_base['X'] = 1e-1
 for r in all_exchanges:
     if r.id in media_derived_components.keys():
         ParDef_base[r.id + '_influx'] = media_derived_components[r.id]
         ParDef_base[r.id + '_consumption'] = solution.fluxes[r.id]
         ICS_base[r.id] = media_derived_components[r.id]
         VarDef[r.id] = r.id + '_influx + ' + r.id + '_consumption' + ' * X'
     if r.id in out_fluxes:
         ParDef_base[r.id + '_outflux'] = solution.fluxes[r.id] 
         VarDef[r.id] = r.id + '_outflux * X'
         ICS_base[r.id] = 0.0
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[52]:
 :END:

*** Define PyDSTool Model
 #+BEGIN_SRC ipython :session :exports both :results raw drawer
   TSPAN = 5

   ParDef = copy.deepcopy(ParDef_base)
   ICS = copy.deepcopy(ICS_base)
   def simulateModel(ModelDS, ParDef, ICS, TSPAN, tstart):
       ModelDS.set(ics=ICS ,pars=ParDef,tdata=[tstart, tstart + TSPAN])
       P = ModelDS.compute('test').sample(dt=0.1)
       return(P)
   ParDef = copy.deepcopy(ParDef_base)
   ICS = copy.deepcopy(ICS_base)
   ModelDef =dst.args(name='Bacteroides',
                     varspecs=VarDef,
                     pars=ParDef,
                     ics=ICS,
                     )

   ModelDS = dst.Vode_ODEsystem(ModelDef)

   P = simulateModel(ModelDS, ParDef, ICS,TSPAN, 0.0)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[53]:
 :END:

*** Create Upperlimit
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
   AllPoints = []
   AllPoints.append(P)
   OriginalLB = {}
   model_copy = copy.deepcopy(model)
   T0=TSPAN

   for r in model_copy.reactions:
       if r in model_copy.exchanges:
           OriginalLB[r.id] = r.lower_bound

   for i in range(0, 10):
       print(T0)
       solution = model_copy.optimize()
       all_exchanges = model_copy.exchanges
       for r in all_exchanges:
           if r.id in media_derived_components.keys():
               model_copy.reactions.get_by_id(r.id).lower_bound = OriginalLB[r.id]*P[r.id][-1]/(0.0005+P[r.id][-1])
               if r.id == 'EX_glu_L_LPAREN_e_RPAREN_':
                   print(r.id + ': ' +str(OriginalLB[r.id]) + ' -> ' + str(model_copy.reactions.get_by_id(r.id).lower_bound))
       solution = model_copy.optimize()
    #   print('mu= ' +str(solution.objective_value))
       ParDef['mu'] = solution.objective_value/60.0
       ICS['X'] = P['X'][-1]
       for r in all_exchanges:
           if r.id in media_derived_components.keys():
                  if P[r.id][-1] < 0.0:
                      ICS[r.id] = 0.0
                  else:
    
                      ParDef[r.id + '_influx'] = media_derived_components[r.id]
                      ParDef[r.id + '_consumption'] = solution.fluxes[r.id]
                      ICS[r.id] = P[r.id][-1]
           if r.id in out_fluxes:
               ParDef[r.id + '_outflux'] = solution.fluxes[r.id] 
               ICS[r.id] = P[r.id][-1] # 0.0
       del P
       P = simulateModel(ModelDS, ParDef, ICS,TSPAN, T0)
   #    print('EX_glu_L_LPAREN_e_RPAREN_' + str(P['EX_glu_L_LPAREN_e_RPAREN_'][-1]))
       T0 += TSPAN

       AllPoints.append(P)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[54]:
 :END:



*** Results
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :ipyfile ./obipy-resources/metabolite-traj-1e-3.png
    T=[]
    X=[]
   for v in VarDef.keys():
           for P in AllPoints:
                   if 'h2o' not in v :
                           T = P['t']
                           X = P[v]
                           plt.plot(T,X)
                   # T = P['t']
                   # X = P['X']
                   # plt.plot(T,X)

   plt.xlabel('Time (minutes)')
   plt.ylabel('mmol')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[55]:
 : Text(0,0.5,u'mmol')
 [[file:./obipy-resources/metabolite-traj-1e-3.png]]
 :END:

 #+BEGIN_SRC ipython :session :exports both :results raw drawer :ipyfile ./obipy-resources/biomass-1e-1.png
    T=[]
    X=[]
   for v in VarDef.keys():
           for P in AllPoints:

                   T = P['t']
                   X = P['X']
                   plt.plot(T,X)

   plt.xlabel('Time (minutes)')
   plt.ylabel('gdw')
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[56]:
 : Text(0,0.5,u'gdw')
 [[file:./obipy-resources/biomass-1e-1.png]]
 :END:

 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
 len(VarDef.keys())
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[10]:
 : 59
 :END:
* Current
* Final Definition of Single Species model
** Headers
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
%matplotlib inline
import cobra
import PyDSTool as dst
import pandas as pd
import matplotlib.pyplot as plt
import copy
import sys
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[1]:
 :END:

** Paths to data
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
model = cobra.io.read_sbml_model('./data/Bacteroides_sp_1_1_14.xml')
mediaFluxes = pd.read_csv('./data/VMH_HighFiber.tsv', sep='\t')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[2]:
:END:

** Read file
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
def cleanupname(name):
    """
    The reaction names in the model files 
    don't have brackets or parentheses. I replaced
    those found in the mediaFluxes file.
    """
    name = name.replace('[', '_LPAREN_')
    name = name.replace(']', '_RPAREN_')
    name = name.replace('(', '_LPAREN_')
    name = name.replace(')', '_RPAREN_')
    return name

"""
Initialize dictionaries for defining the ODE variables for a 
single species
"""

VarDef = dict()
ParDef_base = dict()
ICS_base = dict()

solution = model.optimize() # Get fluxes
all_exchanges = model.exchanges
media_derived_components = dict()

exchange_reaction_ids = [rxn.id for rxn in all_exchanges]
#+END_SRC

** Extract reactions+names
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
for i, row in mediaFluxes.iterrows():
    N = cleanupname(row.Reaction)
    if N in exchange_reaction_ids:
        media_derived_components[N] = row['Flux Value'] / (24.0*60.0) # Per minute
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[12]:
:END:

** Simulate
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t

ParDef_base['mu'] = solution.objective_value/60.0
VarDef['X'] =  'mu * X'
ICS_base['X'] = 1e-1

for r in all_exchanges:
    ParDef_base[r.id + '_Bact'] = solution.fluxes[r.id]
    if r.id in media_derived_components.keys():
        ParDef_base[r.id + '_influx'] = media_derived_components[r.id]
        VarDef[r.id] = r.id + '_influx +' + r.id + '_Bact' + ' * X'
    else: 
        VarDef[r.id] =  r.id + '_Bact' + ' * X'
    ICS_base[r.id] = 1

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[14]:
:END:

** Define Dynamical model
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
TSPAN = 5

ParDef = copy.deepcopy(ParDef_base)
ICS = copy.deepcopy(ICS_base)
def simulateModel(ModelDS, ParDef, ICS, TSPAN, tstart):
    ModelDS.set(ics=ICS ,pars=ParDef,tdata=[tstart, tstart + TSPAN])
    P = ModelDS.compute('test').sample(dt=0.1)
    return(P)
ParDef = copy.deepcopy(ParDef_base)
ICS = copy.deepcopy(ICS_base)
ModelDef =dst.args(name='Bacteroides',
                  varspecs=VarDef,
                  pars=ParDef,
                  ics=ICS,
                  )

ModelDS = dst.Vode_ODEsystem(ModelDef)
P= {}
for k in ICS_base.keys():
    P[k] = [ICS_base[k]]
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[15]:
:END:

#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
  AllPoints = []

  OriginalLB = {}
  model_copy = copy.deepcopy(model)
  T0=0

  for r in model_copy.reactions:
      if r in model_copy.exchanges:
          OriginalLB[r.id] = r.lower_bound

  for i in range(0, 2):
      print(T0)
      all_exchanges = model_copy.exchanges
      for r in all_exchanges:
          model_copy.reactions.get_by_id(r.id).lower_bound = OriginalLB[r.id]*P[r.id][-1]/(0.0005+P[r.id][-1])

          # if r.id == 'EX_adn_L_LPAREN_e_RPAREN_':
          #     print(r.id + ': ' +str(OriginalLB[r.id]) + ' -> ' + str(model_copy.reactions.get_by_id(r.id).lower_bound))
      solution = model_copy.optimize()
      ParDef['mu'] = solution.objective_value/60.0
      ICS['X'] = P['X'][-1]
      for r in all_exchanges:
          ParDef_base[r.id + '_Bact'] = solution.fluxes[r.id]
          ICS[r.id] = P[r.id][-1]
      P = simulateModel(ModelDS, ParDef, ICS,TSPAN, T0)
      TSTOP = T0+TSPAN
      AllNegativeValues = {}
      for variable in VarDef.keys():

          if P[variable][-1] < 0.0:
              AllNegativeValues = {key:P['t'][P[variable].index(value)] for value in P[variable] if P[variable] < 0.0 }
              # for p in P[variable]:
              #     if p < 0.0:
              #         AllNegativeValues[variable] = P['t'][index]
              #         break
              #     index += 1
              # for i in range(0, len(P[variable])):
              #     if P[variable][i] < 0.0:
              #         if P['t'][i] < TSTOP:
              #             TSTOP = P['t'][i]
              #         break
      TSTOP = min(AllNegativeValues, key=AllNegativeValues.get)
      print(AllNegativeValues[TSTOP])
      P = simulateModel(ModelDS, ParDef, ICS,TSPAN, T0)
      T0 += TSPAN
      AllPoints.append(P)
#+END_SRC

#+RESULTS:
:RESULTS:
0 - 2f7330d7-ac38-4825-b25e-1cf0a59a9e12
:END:

#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
AllNegativeValues
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[30]:
: {}
:END:

*** Define utility functions
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
  def recomputeLowerBounds(model, PrevSteadyState, OriginalLB):
      all_exchanges = model_copy.exchanges
      for r in all_exchanges:
          model.reactions.get_by_id(r.id).lower_bound = OriginalLB[r.id]*PrevSteadyState[r.id]/(0.0005+PrevSteadyState[r.id])


  def get_ss(model):
      """
      Takes as input a PyDSTool Model object,
      Returns the SS values
      """
      Points=simulateModel(model)
      SSPoints={}
      for k in Points.keys():
          SSPoints[k]=Points[k][-1]
      return(SSPoints)

#+END_SRC
** Plot Results
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
T=[]
X=[]
for v in VarDef.keys():
        for P in AllPoints:
                if 'h2o' not in v :
                       # print(v)
                        T = P['t']
                        X = P[v]
                        plt.plot(T,X)
#                 T = P['t']
#                 X = P['X']
#                 plt.plot(T,X)

plt.xlabel('Time (minutes)')
plt.ylabel('gdw')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[8]:
: Text(0,0.5,u'gdw')
[[file:./obipy-resources/2300s0Y.png]]
:END:
* Cleaned up version
** Headers
 #+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
%matplotlib inline
import cobra
import PyDSTool as dst
import pandas as pd
import matplotlib.pyplot as plt
import copy
import sys
import pdb
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 # Out[54]:
 :END:

** Utility Functions
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
    # Functions for initialization
    def cleanupname(name):
        """
        The reaction names in the model files 
        don't have brackets or parentheses. I replaced
        those found in the mediaFluxes file.
        """
        name = name.replace('[', '_LPAREN_')
        name = name.replace(']', '_RPAREN_')
        name = name.replace('(', '_LPAREN_')
        name = name.replace(')', '_RPAREN_')
        return name


    def speciesSpecificInFluxes(SpeciesModel, MediaDF):
        all_exchanges = SpeciesModel.exchanges
        mediaDerivedComponents = dict()

        exchange_reaction_ids = [rxn.id for rxn in all_exchanges]
        for i, row in MediaDF.iterrows():
            N = cleanupname(row.Reaction)
            if N in exchange_reaction_ids:
                mediaDerivedComponents[N] = row['Flux Value'] / (24.0*60.0) # Per minute

        return(mediaDerivedComponents)

    def defineDFBAModel(SpeciesDict , MediaDF):
        print("Defining Dynamical model... \n")
        ParDef = dict()
        VarDef = dict()
        ICS = dict()
        exchange_list = []
        mediaDerivedComponents = {}
        for i, row in MediaDF.iterrows():
            N = cleanupname(row.Reaction)
            mediaDerivedComponents[N] = row['Flux Value'] / (24.0*60.0) # Per minute

        for species in SpeciesDict.keys():
            SpeciesDict[species]['SpeciesModel'] = cobra.io.read_sbml_model(SpeciesDict[species]['File'])
            # SpeciesDict[species]['SpMediaDerivedComponents'] = speciesSpecificInFluxes(SpeciesDict[species]['SpeciesModel'], MediaDF)
            SpeciesDict[species]['solution'] = SpeciesDict[species]['SpeciesModel'].optimize()
            SpeciesDict[species]['Name'] = SpeciesDict[species]['SpeciesModel'].name.split(' ')[0]
            exchange_list += SpeciesDict[species]['SpeciesModel'].exchanges
            Name=SpeciesDict[species]['Name']
            ParDef['mu' + '_' + Name] = SpeciesDict[species]['solution'].objective_value
            VarDef[Name] =  'mu_' + Name + ' * ' + Name ### Biomass
            ICS[Name] = 1e-1
          
        all_exchanges = set()

        for ex in exchange_list:
            all_exchanges.add(ex.id)
   #     all_exchanges = list(set(exchange_list))
    
        for rid in all_exchanges:
            VarDef[rid] = '0'
            ICS[rid] = 10

            if rid in mediaDerivedComponents.keys():
                ParDef[rid + '_influx'] = mediaDerivedComponents[rid]
                VarDef[rid] += ' + ' +  rid + '_influx'


            for species in SpeciesDict.keys():
  #              print(SpeciesDict[species]['Name'])
                if 'h2o' in rid:
                    print(species, rid)
                if rid in [species_r.id for species_r in SpeciesDict[species]['SpeciesModel'].exchanges]:
                    Name = SpeciesDict[species]['Name']
                    ParDef[rid + '_' + Name] = SpeciesDict[species]['solution'].fluxes[rid]/60.0
                    VarDef[rid] += ' + ' +  rid + '_' + Name + ' * ' + Name

        ModelDef = dst.args(name=Name,
                        pars=ParDef,
                            varspecs=VarDef,
                            ics=ICS)
        ModelDS = dst.Vode_ODEsystem(ModelDef)
        print("Done!")
        return (SpeciesDict, ModelDef, ModelDS)

    # Functions for model updates

    def recomputeLowerBounds(SpeciesFBAModel, PrevSteadyState, OriginalLB):
        for r in SpeciesFBAModel.exchanges:
            SpeciesFBAModel.reactions.get_by_id(r.id) \
                           .lower_bound = \
                                          OriginalLB[r.id] \
                                          ,* PrevSteadyState[r.id]/(0.0005+PrevSteadyState[r.id])
        return SpeciesFBAModel

    def updateFluxParameters(SpeciesFBAModel, SpeciesDynamicModel, PrevSteadyState):
        solution = SpeciesFBAModel.optimize()
        Name = SpeciesFBAModel.name.split(' ')[0]
        ParDef['mu'] = solution.objective_value/60.0
        ICS[Name] = PrevSteadyState[Name]
        for r in all_exchanges:
            ParDef[r.id + '_' + Name] = solution.fluxes[r.id]
            ICS[r.id] = PrevSteadyState[r.id]

        SpeciesDynamicModel.set(pars=ParDef, ics=ICS)
        return SpeciesDynamicModel

    def update(SpeciesFBAModel, SpeciesDynamicModel, PrevSteadyState):
        updatedFBAModel = recomputeLowerBounds(SpeciesFBAModel,
                                               PreviousSteadyState,
                                               SpeciesOriginalLB)

        updatedDynamicModel = updateFluxParameters(updateFBAModel,
                                                   SpeciesDynamicModel,
                                                   PrevSteadyState)
        P = simulateModel(updatedDynamicalModel)
        return P

    def get_ss(DynamicModel):
          """
          Takes as input a PyDSTool Model object,
          Returns the SS values
          """
          Points=simulateModel(DynamicModel)
          SSPoints={}
          for k in Points.keys():
              SSPoints[k]=Points[k][-1]
          return(SSPoints)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[67]:
:END:

** Test:
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
  SpeciesDict = {'Sp1': {'File':'./data/Bacteroides_sp_1_1_14.xml'},
                 'Sp2': {'File':'./data/Actinomyces_urogenitalis_DSM_15434.xml'}
  }
  MediaDF = pd.read_csv('./data/VMH_HighFiber.tsv', sep='\t')

  SpeciesDict, Definition, ModelDS = defineDFBAModel(SpeciesDict, MediaDF)
  #VarDef = defineDFBAModel(SpeciesDict, MediaDF)
  # print(VarDef)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[68]:
:END:

#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
Definition.varspecs
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[61]:
#+BEGIN_EXAMPLE
  {'Actinomyces': 'mu_Actinomyces * Actinomyces',
  'Bacteroides': 'mu_Bacteroides * Bacteroides',
  'DM_5MTR': '0 + DM_5MTR_Actinomyces * Actinomyces',
  'DM_dhptd_LPAREN_c_RPAREN_': '0 + DM_dhptd_LPAREN_c_RPAREN__Actinomyces * Actinomyces',
  'DM_hcys_L_LSQBKT_c_RSQBKT_': '0 + DM_hcys_L_LSQBKT_c_RSQBKT__Actinomyces * Actinomyces',
  'DM_pheme_LPAREN_c_RPAREN_': '0 + DM_pheme_LPAREN_c_RPAREN__Bacteroides * Bacteroides',
  'EX_12dgr180_LPAREN_e_RPAREN_': '0 + EX_12dgr180_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_26dap_M_LPAREN_e_RPAREN_': '0 + EX_26dap_M_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_2dmmq8_LPAREN_e_RPAREN_': '0 + EX_2dmmq8_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_2obut_LPAREN_e_RPAREN_': '0 + EX_2obut_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_2obut_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_4abz_LPAREN_e_RPAREN_': '0 + EX_4abz_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_4hbz_LPAREN_e_RPAREN_': '0 + EX_4hbz_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_4hbz_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ac_LPAREN_e_RPAREN_': '0 + EX_ac_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ac_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_acald_LPAREN_e_RPAREN_': '0 + EX_acald_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_acgam_LPAREN_e_RPAREN_': '0 + EX_acgam_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_acgam_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ade_LPAREN_e_RPAREN_': '0 + EX_ade_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_adn_LPAREN_e_RPAREN_': '0 + EX_adn_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_adpcbl_LPAREN_e_RPAREN_': '0 + EX_adpcbl_LPAREN_e_RPAREN__influx + EX_adpcbl_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_akg_LPAREN_e_RPAREN_': '0 + EX_akg_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ala_D_LPAREN_e_RPAREN_': '0 + EX_ala_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ala_L_LPAREN_e_RPAREN_': '0 + EX_ala_L_LPAREN_e_RPAREN__influx + EX_ala_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alaasp_LPAREN_e_RPAREN_': '0 + EX_alaasp_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alagln_LPAREN_e_RPAREN_': '0 + EX_alagln_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alaglu_LPAREN_e_RPAREN_': '0 + EX_alaglu_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alagly_LPAREN_e_RPAREN_': '0 + EX_alagly_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alahis_LPAREN_e_RPAREN_': '0 + EX_alahis_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alaleu_LPAREN_e_RPAREN_': '0 + EX_alaleu_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alathr_LPAREN_e_RPAREN_': '0 + EX_alathr_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_alltn_LPAREN_e_RPAREN_': '0 + EX_alltn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_arab_L_LPAREN_e_RPAREN_': '0 + EX_arab_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_arab_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_arabttr_LPAREN_e_RPAREN_': '0 + EX_arabttr_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_arabttr_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_arbt_LPAREN_e_RPAREN_': '0 + EX_arbt_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_arg_L_LPAREN_e_RPAREN_': '0 + EX_arg_L_LPAREN_e_RPAREN__influx + EX_arg_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_arg_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_arsenb_LPAREN_e_RPAREN_': '0 + EX_arsenb_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_asn_L_LPAREN_e_RPAREN_': '0 + EX_asn_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_asn_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_asp_L_LPAREN_e_RPAREN_': '0 + EX_asp_L_LPAREN_e_RPAREN__influx + EX_asp_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_biomass_LPAREN_e_RPAREN_': '0 + EX_biomass_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_biomass_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_btn_LPAREN_e_RPAREN_': '0 + EX_btn_LPAREN_e_RPAREN__influx + EX_btn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ca2_LPAREN_e_RPAREN_': '0 + EX_ca2_LPAREN_e_RPAREN__influx + EX_ca2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ca2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cbl1_LPAREN_e_RPAREN_': '0 + EX_cbl1_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_cbl2_LPAREN_e_RPAREN_': '0 + EX_cbl2_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_cd2_LPAREN_e_RPAREN_': '0 + EX_cd2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_cd2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cgly_LPAREN_e_RPAREN_': '0 + EX_cgly_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_chtbs_LPAREN_e_RPAREN_': '0 + EX_chtbs_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_cit_LPAREN_e_RPAREN_': '0 + EX_cit_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_cl_LPAREN_e_RPAREN_': '0 + EX_cl_LPAREN_e_RPAREN__influx + EX_cl_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_cl_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_co2_LPAREN_e_RPAREN_': '0 + EX_co2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_co2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cobalt2_LPAREN_e_RPAREN_': '0 + EX_cobalt2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_cobalt2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cro4_LPAREN_e_RPAREN_': '0 + EX_cro4_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_csn_LPAREN_e_RPAREN_': '0 + EX_csn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ctbt_LPAREN_e_RPAREN_': '0 + EX_ctbt_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_cu2_LPAREN_e_RPAREN_': '0 + EX_cu2_LPAREN_e_RPAREN__influx + EX_cu2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_cu2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cys_L_LPAREN_e_RPAREN_': '0 + EX_cys_L_LPAREN_e_RPAREN__influx + EX_cys_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_cytd_LPAREN_e_RPAREN_': '0 + EX_cytd_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_cytd_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_dad_2_LPAREN_e_RPAREN_': '0 + EX_dad_2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_dad_2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_dcyt_LPAREN_e_RPAREN_': '0 + EX_dcyt_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_dcyt_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ddca_LPAREN_e_RPAREN_': '0 + EX_ddca_LPAREN_e_RPAREN__influx + EX_ddca_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_dgsn_LPAREN_e_RPAREN_': '0 + EX_dgsn_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_dgsn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_din_LPAREN_e_RPAREN_': '0 + EX_din_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_drib_LPAREN_e_RPAREN_': '0 + EX_drib_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_duri_LPAREN_e_RPAREN_': '0 + EX_duri_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_fe2_LPAREN_e_RPAREN_': '0 + EX_fe2_LPAREN_e_RPAREN__influx + EX_fe2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_fe2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_fe3_LPAREN_e_RPAREN_': '0 + EX_fe3_LPAREN_e_RPAREN__influx + EX_fe3_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_fe3_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_fol_LPAREN_e_RPAREN_': '0 + EX_fol_LPAREN_e_RPAREN__influx + EX_fol_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_for_LPAREN_e_RPAREN_': '0 + EX_for_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_for_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_fru_LPAREN_e_RPAREN_': '0 + EX_fru_LPAREN_e_RPAREN__influx + EX_fru_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_gal_LPAREN_e_RPAREN_': '0 + EX_gal_LPAREN_e_RPAREN__influx + EX_gal_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_galt_LPAREN_e_RPAREN_': '0 + EX_galt_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_galt_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_galur_LPAREN_e_RPAREN_': '0 + EX_galur_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_gam_LPAREN_e_RPAREN_': '0 + EX_gam_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_gbbtn_LPAREN_e_RPAREN_': '0 + EX_gbbtn_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_gcald_LPAREN_e_RPAREN_': '0 + EX_gcald_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glc_LPAREN_e_RPAREN_': '0 + EX_glc_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glcur_LPAREN_e_RPAREN_': '0 + EX_glcur_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_gln_L_LPAREN_e_RPAREN_': '0 + EX_gln_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glu_L_LPAREN_e_RPAREN_': '0 + EX_glu_L_LPAREN_e_RPAREN__influx + EX_glu_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_glu_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_gly_LPAREN_e_RPAREN_': '0 + EX_gly_LPAREN_e_RPAREN__influx + EX_gly_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyasn_LPAREN_e_RPAREN_': '0 + EX_glyasn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyasp_LPAREN_e_RPAREN_': '0 + EX_glyasp_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyb_LPAREN_e_RPAREN_': '0 + EX_glyb_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_glyc3p_LPAREN_e_RPAREN_': '0 + EX_glyc3p_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyc_LPAREN_e_RPAREN_': '0 + EX_glyc_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glycys_LPAREN_e_RPAREN_': '0 + EX_glycys_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glygln_LPAREN_e_RPAREN_': '0 + EX_glygln_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyglu_LPAREN_e_RPAREN_': '0 + EX_glyglu_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyleu_LPAREN_e_RPAREN_': '0 + EX_glyleu_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glymet_LPAREN_e_RPAREN_': '0 + EX_glymet_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glyphe_LPAREN_e_RPAREN_': '0 + EX_glyphe_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glypro_LPAREN_e_RPAREN_': '0 + EX_glypro_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_glytyr_LPAREN_e_RPAREN_': '0 + EX_glytyr_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_gsn_LPAREN_e_RPAREN_': '0 + EX_gsn_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_gua_LPAREN_e_RPAREN_': '0 + EX_gua_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_h2_LPAREN_e_RPAREN_': '0 + EX_h2_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_h2o_LPAREN_e_RPAREN_': '0 + EX_h2o_LPAREN_e_RPAREN__influx + EX_h2o_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_h2o_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_h2s_LPAREN_e_RPAREN_': '0 + EX_h2s_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_h_LPAREN_e_RPAREN_': '0 + EX_h_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_h_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_hdca_LPAREN_e_RPAREN_': '0 + EX_hdca_LPAREN_e_RPAREN__influx + EX_hdca_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_hg2_LPAREN_e_RPAREN_': '0 + EX_hg2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_hg2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_his_L_LPAREN_e_RPAREN_': '0 + EX_his_L_LPAREN_e_RPAREN__influx + EX_his_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_hxan_LPAREN_e_RPAREN_': '0 + EX_hxan_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ile_L_LPAREN_e_RPAREN_': '0 + EX_ile_L_LPAREN_e_RPAREN__influx + EX_ile_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_indole_LPAREN_e_RPAREN_': '0 + EX_indole_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_inost_LPAREN_e_RPAREN_': '0 + EX_inost_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ins_LPAREN_e_RPAREN_': '0 + EX_ins_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_isobut_LPAREN_e_RPAREN_': '0 + EX_isobut_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_isocapr_LPAREN_e_RPAREN_': '0 + EX_isocapr_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_isoval_LPAREN_e_RPAREN_': '0 + EX_isoval_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_k_LPAREN_e_RPAREN_': '0 + EX_k_LPAREN_e_RPAREN__influx + EX_k_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_k_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_lac_D_LPAREN_e_RPAREN_': '0 + EX_lac_D_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_lac_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_lac_L_LPAREN_e_RPAREN_': '0 + EX_lac_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_lac_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_lcts_LPAREN_e_RPAREN_': '0 + EX_lcts_LPAREN_e_RPAREN__influx + EX_lcts_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_leu_L_LPAREN_e_RPAREN_': '0 + EX_leu_L_LPAREN_e_RPAREN__influx + EX_leu_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_leu_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_lys_L_LPAREN_e_RPAREN_': '0 + EX_lys_L_LPAREN_e_RPAREN__influx + EX_lys_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_lys_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_malt_LPAREN_e_RPAREN_': '0 + EX_malt_LPAREN_e_RPAREN__influx + EX_malt_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_malthx_LPAREN_e_RPAREN_': '0 + EX_malthx_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_malttr_LPAREN_e_RPAREN_': '0 + EX_malttr_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_man_LPAREN_e_RPAREN_': '0 + EX_man_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_mantr_LPAREN_e_RPAREN_': '0 + EX_mantr_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_met_D_LPAREN_e_RPAREN_': '0 + EX_met_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_met_L_LPAREN_e_RPAREN_': '0 + EX_met_L_LPAREN_e_RPAREN__influx + EX_met_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_metala_LPAREN_e_RPAREN_': '0 + EX_metala_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_metsox_R_L_LPAREN_e_RPAREN_': '0 + EX_metsox_R_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_metsox_S_L_LPAREN_e_RPAREN_': '0 + EX_metsox_S_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_mg2_LPAREN_e_RPAREN_': '0 + EX_mg2_LPAREN_e_RPAREN__influx + EX_mg2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_mg2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_mn2_LPAREN_e_RPAREN_': '0 + EX_mn2_LPAREN_e_RPAREN__influx + EX_mn2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_mn2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_mnl_LPAREN_e_RPAREN_': '0 + EX_mnl_LPAREN_e_RPAREN__influx + EX_mnl_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_mqn8_LPAREN_e_RPAREN_': '0 + EX_mqn8_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_na1_LPAREN_e_RPAREN_': '0 + EX_na1_LPAREN_e_RPAREN__influx + EX_na1_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_na1_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_nac_LPAREN_e_RPAREN_': '0 + EX_nac_LPAREN_e_RPAREN__influx + EX_nac_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_nac_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_nh4_LPAREN_e_RPAREN_': '0 + EX_nh4_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_nh4_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ni2_LPAREN_e_RPAREN_': '0 + EX_ni2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_no2_LPAREN_e_RPAREN_': '0 + EX_no2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_no2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_no3_LPAREN_e_RPAREN_': '0 + EX_no3_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_o2_LPAREN_e_RPAREN_': '0 + EX_o2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_o2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ocdca_LPAREN_e_RPAREN_': '0 + EX_ocdca_LPAREN_e_RPAREN__influx + EX_ocdca_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_ocdcea_LPAREN_e_RPAREN_': '0 + EX_ocdcea_LPAREN_e_RPAREN__influx + EX_ocdcea_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_orn_LPAREN_e_RPAREN_': '0 + EX_orn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pb_LPAREN_e_RPAREN_': '0 + EX_pb_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_pb_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_phe_L_LPAREN_e_RPAREN_': '0 + EX_phe_L_LPAREN_e_RPAREN__influx + EX_phe_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pheme_LPAREN_e_RPAREN_': '0 + EX_pheme_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_pheme_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pi_LPAREN_e_RPAREN_': '0 + EX_pi_LPAREN_e_RPAREN__influx + EX_pi_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_pi_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ppa_LPAREN_e_RPAREN_': '0 + EX_ppa_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ppa_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ppi_LPAREN_e_RPAREN_': '0 + EX_ppi_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ppi_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pro_L_LPAREN_e_RPAREN_': '0 + EX_pro_L_LPAREN_e_RPAREN__influx + EX_pro_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_pro_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ptrc_LPAREN_e_RPAREN_': '0 + EX_ptrc_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_pydam_LPAREN_e_RPAREN_': '0 + EX_pydam_LPAREN_e_RPAREN__influx + EX_pydam_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pydx_LPAREN_e_RPAREN_': '0 + EX_pydx_LPAREN_e_RPAREN__influx + EX_pydx_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_pydxn_LPAREN_e_RPAREN_': '0 + EX_pydxn_LPAREN_e_RPAREN__influx + EX_pydxn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_q8_LPAREN_e_RPAREN_': '0 + EX_q8_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_raffin_LPAREN_e_RPAREN_': '0 + EX_raffin_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_rib_D_LPAREN_e_RPAREN_': '0 + EX_rib_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ribflv_LPAREN_e_RPAREN_': '0 + EX_ribflv_LPAREN_e_RPAREN__influx + EX_ribflv_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_rmn_LPAREN_e_RPAREN_': '0 + EX_rmn_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_salcn_LPAREN_e_RPAREN_': '0 + EX_salcn_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_sbt_DASH_d_LPAREN_e_RPAREN_': '0 + EX_sbt_DASH_d_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ser_D_LPAREN_e_RPAREN_': '0 + EX_ser_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ser_L_LPAREN_e_RPAREN_': '0 + EX_ser_L_LPAREN_e_RPAREN__influx + EX_ser_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ser_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_sheme_LPAREN_e_RPAREN_': '0 + EX_sheme_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_so4_LPAREN_e_RPAREN_': '0 + EX_so4_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_so4_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_spmd_LPAREN_e_RPAREN_': '0 + EX_spmd_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_spmd_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_stys_LPAREN_e_RPAREN_': '0 + EX_stys_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_succ_LPAREN_e_RPAREN_': '0 + EX_succ_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_succ_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_sucr_LPAREN_e_RPAREN_': '0 + EX_sucr_LPAREN_e_RPAREN__influx + EX_sucr_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_thm_LPAREN_e_RPAREN_': '0 + EX_thm_LPAREN_e_RPAREN__influx + EX_thm_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_thr_L_LPAREN_e_RPAREN_': '0 + EX_thr_L_LPAREN_e_RPAREN__influx + EX_thr_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_thr_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_thymd_LPAREN_e_RPAREN_': '0 + EX_thymd_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_thymd_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_tre_LPAREN_e_RPAREN_': '0 + EX_tre_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ttdca_LPAREN_e_RPAREN_': '0 + EX_ttdca_LPAREN_e_RPAREN__influx + EX_ttdca_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_tyr_L_LPAREN_e_RPAREN_': '0 + EX_tyr_L_LPAREN_e_RPAREN__influx + EX_tyr_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_ura_LPAREN_e_RPAREN_': '0 + EX_ura_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_ura_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_urea_LPAREN_e_RPAREN_': '0 + EX_urea_LPAREN_e_RPAREN__Bacteroides * Bacteroides',
  'EX_uri_LPAREN_e_RPAREN_': '0 + EX_uri_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_uri_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_val_L_LPAREN_e_RPAREN_': '0 + EX_val_L_LPAREN_e_RPAREN__influx + EX_val_L_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_val_L_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_xan_LPAREN_e_RPAREN_': '0 + EX_xan_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_xan_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_xyl_D_LPAREN_e_RPAREN_': '0 + EX_xyl_D_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_xyl_D_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'EX_zn2_LPAREN_e_RPAREN_': '0 + EX_zn2_LPAREN_e_RPAREN__influx + EX_zn2_LPAREN_e_RPAREN__Bacteroides * Bacteroides + EX_zn2_LPAREN_e_RPAREN__Actinomyces * Actinomyces',
  'dreplication': '0 + dreplication_Bacteroides * Bacteroides + dreplication_Actinomyces * Actinomyces',
  'pbiosynthesis': '0 + pbiosynthesis_Bacteroides * Bacteroides + pbiosynthesis_Actinomyces * Actinomyces',
  'rtranscription': '0 + rtranscription_Bacteroides * Bacteroides + rtranscription_Actinomyces * Actinomyces',
  'sink_PGPm1_LSQBKT_c_RSQBKT_': '0 + sink_PGPm1_LSQBKT_c_RSQBKT__Actinomyces * Actinomyces'}
#+END_EXAMPLE
:END:

#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[39]:
: True
:END:
#+BEGIN_SRC ipython :session :exports both :results raw drawer :async t
ModelDS.set(tdata=[0,10])
P = ModelDS.compute('test').sample()
for species in SpeciesDict.keys():
    plt.plot(P['t'],P[SpeciesDict[species]['Name']])
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[69]:
[[file:./obipy-resources/38449aQ.png]]
:END:
